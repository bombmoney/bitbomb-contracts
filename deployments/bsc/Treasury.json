{
  "address": "0xcB88d14BAaB4ca0C23c4910269bDcEaA7051c4e2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "BoardroomFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bombAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BoughtBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BurnedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DaoFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DevFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bombAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bbond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boardroom",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "boardroomAllocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "boardroomGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "boardroomSetLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "boardroomSetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bomb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bombOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bombPriceCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bombPriceOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepletionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bshare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bombAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "buyBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSupplyContractionLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "excludedFromTotalSupply",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBombCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBombPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bombPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBombUpdatedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_bombPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnableBombLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burnableBombLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemableBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_redeemableBonds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bomb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bbond",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bshare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bombOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boardroom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebtRatioPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxExpansionTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyContractionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFactorForPayingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousEpochBombPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageExpansionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageSaved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boardroom",
          "type": "address"
        }
      ],
      "name": "setBoardroom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bombOracle",
          "type": "address"
        }
      ],
      "name": "setBombOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bombPriceCeiling",
          "type": "uint256"
        }
      ],
      "name": "setBombPriceCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondDepletionFloorPercent",
          "type": "uint256"
        }
      ],
      "name": "setBondDepletionFloorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bootstrapEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrapSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setBootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountPercent",
          "type": "uint256"
        }
      ],
      "name": "setDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daoFundSharedPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_devFundSharedPercent",
          "type": "uint256"
        }
      ],
      "name": "setExtraFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebtRatioPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtRatioPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDiscountRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxDiscountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpansionTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPremiumRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxPremiumRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyContractionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyContractionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyExpansionPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingFactorForPayingDebt",
          "type": "uint256"
        }
      ],
      "name": "setMintingFactorForPayingDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumPercent",
          "type": "uint256"
        }
      ],
      "name": "setPremiumPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumThreshold",
          "type": "uint256"
        }
      ],
      "name": "setPremiumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setSupplyTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supplyTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a40d5fc297d09489b017affc1394ac5bfbe0b290707c845b3e291a46be16a66",
  "receipt": {
    "to": null,
    "from": "0xFe0E920eB3B4879c81305945dba83D14B95d4276",
    "contractAddress": "0xcB88d14BAaB4ca0C23c4910269bDcEaA7051c4e2",
    "transactionIndex": 66,
    "gasUsed": "4012240",
    "logsBloom": "0x
    "blockHash": "0x3c3ad3024285291e7f9bf142586ee7fe9a8241b08356de35f89c5e3e21d0ca88",
    "transactionHash": "0x3a40d5fc297d09489b017affc1394ac5bfbe0b290707c845b3e291a46be16a66",
    "logs": [],
    "blockNumber": 17278093,
    "cumulativeGasUsed": "12597256",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0afc0c428a81e8862c02bda54b6713f6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"BoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"boardroomAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"boardroomGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"boardroomSetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"boardroomSetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bomb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bombOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bombPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bombPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bshare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bombAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBombCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBombPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBombUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_bombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableBombLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableBombLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bomb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bbond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bshare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bombOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochBombPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bombOracle\",\"type\":\"address\"}],\"name\":\"setBombOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bombPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setBombPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\n\\n/*\\n\\n$$$$$$$\\\\   $$$$$$\\\\  $$\\\\      $$\\\\ $$$$$$$\\\\                                                            \\n$$  __$$\\\\ $$  __$$\\\\ $$$\\\\    $$$ |$$  __$$\\\\                                                           \\n$$ |  $$ |$$ /  $$ |$$$$\\\\  $$$$ |$$ |  $$ |    $$$$$$\\\\$$$$\\\\   $$$$$$\\\\  $$$$$$$\\\\   $$$$$$\\\\  $$\\\\   $$\\\\ \\n$$$$$$$\\\\ |$$ |  $$ |$$\\\\$$\\\\$$ $$ |$$$$$$$\\\\ |    $$  _$$  _$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$ |  $$ |\\n$$  __$$\\\\ $$ |  $$ |$$ \\\\$$$  $$ |$$  __$$\\\\     $$ / $$ / $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |\\n$$ |  $$ |$$ |  $$ |$$ |\\\\$  /$$ |$$ |  $$ |    $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |\\n$$$$$$$  | $$$$$$  |$$ | \\\\_/ $$ |$$$$$$$  |$$\\\\ $$ | $$ | $$ |\\\\$$$$$$  |$$ |  $$ |\\\\$$$$$$$\\\\ \\\\$$$$$$$ |\\n\\\\_______/  \\\\______/ \\\\__|     \\\\__|\\\\_______/ \\\\__|\\\\__| \\\\__| \\\\__| \\\\______/ \\\\__|  \\\\__| \\\\_______| \\\\____$$ |\\n                                                                                           $$\\\\   $$ |\\n                                                                                           \\\\$$$$$$  |\\n    http://bomb.money                                                                      \\\\______/ \\n*/\\ncontract Treasury is ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 8 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply = [\\n        address(0xbc0BC07A7e05b9a11A8e504FC29eb49D08445475), // BombGenesisPool\\n        address(0x6E6BB04f91C928FBdC7f036462B0474107d86ef1) // new BombRewardPool\\n    ];\\n\\n    // core components\\n    address public bomb;\\n    address public bbond;\\n    address public bshare;\\n\\n    address public boardroom;\\n    address public bombOracle;\\n\\n    // price\\n    uint256 public bombPriceOne;\\n    uint256 public bombPriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    // 28 first epochs (1 week) with 4.5% expansion regardless of BOMB price\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochBombPrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra BOMB during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address public devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(address indexed from, uint256 bombAmount, uint256 bondAmount);\\n    event BoughtBonds(address indexed from, uint256 bombAmount, uint256 bondAmount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition() {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch() {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getBombPrice() > bombPriceCeiling) ? 0 : getBombCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\\n    }\\n\\n    modifier checkOperator() {\\n        require(\\n            IBasisAsset(bomb).operator() == address(this) &&\\n                IBasisAsset(bbond).operator() == address(this) &&\\n                IBasisAsset(bshare).operator() == address(this) &&\\n                Operator(boardroom).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getBombPrice() public view returns (uint256 bombPrice) {\\n        try IOracle(bombOracle).consult(bomb, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult BOMB price from the oracle\\\");\\n        }\\n    }\\n\\n    function getBombUpdatedPrice() public view returns (uint256 _bombPrice) {\\n        try IOracle(bombOracle).twap(bomb, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult BOMB price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableBombLeft() public view returns (uint256 _burnableBombLeft) {\\n        uint256 _bombPrice = getBombPrice();\\n        if (_bombPrice <= bombPriceOne) {\\n            uint256 _bombSupply = getBombCirculatingSupply();\\n            uint256 _bondMaxSupply = _bombSupply.mul(maxDebtRatioPercent).div(10000);\\n            uint256 _bondSupply = IERC20(bbond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableBomb = _maxMintableBond.mul(_bombPrice).div(1e13);\\n                _burnableBombLeft = Math.min(epochSupplyContractionLeft, _maxBurnableBomb);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\\n        uint256 _bombPrice = getBombPrice();\\n        if (_bombPrice > bombPriceCeiling) {\\n            uint256 _totalBomb = IERC20(bomb).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalBomb.mul(1e13).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _bombPrice = getBombPrice();\\n        if (_bombPrice <= bombPriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = bombPriceOne;\\n            } else {\\n                uint256 _bondAmount = bombPriceOne.mul(1e18).div(_bombPrice); // to burn 1 BOMB\\n                uint256 _discountAmount = _bondAmount.sub(bombPriceOne).mul(discountPercent).div(10000);\\n                _rate = bombPriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _bombPrice = getBombPrice();\\n        if (_bombPrice > bombPriceCeiling) {\\n            uint256 _bombPricePremiumThreshold = bombPriceOne.mul(premiumThreshold).div(100);\\n            if (_bombPrice >= _bombPricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _bombPrice.sub(bombPriceOne).mul(premiumPercent).div(10000);\\n                _rate = bombPriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = bombPriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _bomb,\\n        address _bbond,\\n        address _bshare,\\n        address _bombOracle,\\n        address _boardroom,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        bomb = _bomb;\\n        bbond = _bbond;\\n        bshare = _bshare;\\n        bombOracle = _bombOracle;\\n        boardroom = _boardroom;\\n        startTime = _startTime;\\n\\n        bombPriceOne = 10**13; // This is to allow a PEG of 10,000 BOMB per BTC\\n        bombPriceCeiling = bombPriceOne.mul(101).div(100);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [0 ether, 5000000 ether, 10000000 ether, 20000000 ether, 50000000 ether, 100000000 ether];\\n        maxExpansionTiers = [250, 200, 175, 150, 125, 100];\\n\\n        maxSupplyExpansionPercent = 450; // Upto 4.5% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for boardroom\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn BOMB and mint tBOND)\\n        maxDebtRatioPercent = 3500; // Upto 35% supply of tBOND to purchase\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 28 epochs with 4.5% expansion\\n        bootstrapEpochs = 21;\\n        bootstrapSupplyExpansionPercent = 450;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(bomb).balanceOf(address(this));\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _boardroom) external onlyOperator {\\n        boardroom = _boardroom;\\n    }\\n\\n    function setBombOracle(address _bombOracle) external onlyOperator {\\n        bombOracle = _bombOracle;\\n    }\\n\\n    function setBombPriceCeiling(uint256 _bombPriceCeiling) external onlyOperator {\\n        require(_bombPriceCeiling >= bombPriceOne && _bombPriceCeiling <= bombPriceOne.mul(120).div(100), \\\"out of range\\\"); // [$1.0, $1.2]\\n        bombPriceCeiling = _bombPriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \\\"_maxSupplyExpansionPercent: out of range\\\"); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < 8) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \\\"out of range\\\"); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \\\"out of range\\\"); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \\\"out of range\\\"); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \\\"_bootstrapSupplyExpansionPercent: out of range\\\"); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 4000, \\\"out of range\\\"); // <= 40%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 2000, \\\"out of range\\\"); // <= 20%\\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\\n        require(_premiumThreshold >= bombPriceCeiling, \\\"_premiumThreshold exceeds bombPriceCeiling\\\");\\n        require(_premiumThreshold <= 150, \\\"_premiumThreshold is higher than 1.5\\\");\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \\\"_mintingFactorForPayingDebt: out of range\\\"); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateBombPrice() internal {\\n        try IOracle(bombOracle).update() {} catch {}\\n    }\\n\\n    function getBombCirculatingSupply() public view returns (uint256) {\\n        IERC20 bombErc20 = IERC20(bomb);\\n        uint256 totalSupply = bombErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\\n            balanceExcluded = balanceExcluded.add(bombErc20.balanceOf(excludedFromTotalSupply[entryId]));\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _bombAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bombAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\n\\n        uint256 bombPrice = getBombPrice();\\n        require(bombPrice == targetPrice, \\\"Treasury: BOMB price moved\\\");\\n        require(\\n            bombPrice < bombPriceOne, // price < $1\\n            \\\"Treasury: bombPrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(_bombAmount <= epochSupplyContractionLeft, \\\"Treasury: not enough bond left to purchase\\\");\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _bombAmount.mul(_rate).div(1e13);\\n        uint256 bombSupply = getBombCirculatingSupply();\\n        uint256 newBondSupply = IERC20(bbond).totalSupply().add(_bondAmount);\\n        require(newBondSupply <= bombSupply.mul(maxDebtRatioPercent).div(10000), \\\"over max debt ratio\\\");\\n\\n        IBasisAsset(bomb).burnFrom(msg.sender, _bombAmount);\\n        IBasisAsset(bbond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_bombAmount);\\n        _updateBombPrice();\\n\\n        emit BoughtBonds(msg.sender, _bombAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bondAmount > 0, \\\"Treasury: cannot redeem bonds with zero amount\\\");\\n\\n        uint256 bombPrice = getBombPrice();\\n        require(bombPrice == targetPrice, \\\"Treasury: BOMB price moved\\\");\\n        require(\\n            bombPrice > bombPriceCeiling, // price > $1.01\\n            \\\"Treasury: bombPrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bombAmount = _bondAmount.mul(_rate).div(1e13);\\n        require(IERC20(bomb).balanceOf(address(this)) >= _bombAmount, \\\"Treasury: treasury has no more budget\\\");\\n\\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _bombAmount));\\n\\n        IBasisAsset(bbond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(bomb).safeTransfer(msg.sender, _bombAmount);\\n\\n        _updateBombPrice();\\n\\n        emit RedeemedBonds(msg.sender, _bombAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IBasisAsset(bomb).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(bomb).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(bomb).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(bomb).safeApprove(boardroom, 0);\\n        IERC20(bomb).safeApprove(boardroom, _amount);\\n        IBoardroom(boardroom).allocateSeigniorage(_amount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _bombSupply) internal returns (uint256) {\\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\\n            if (_bombSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\\n        _updateBombPrice();\\n        previousEpochBombPrice = getBombPrice();\\n        uint256 bombSupply = getBombCirculatingSupply().sub(seigniorageSaved);\\n        if (epoch < bootstrapEpochs) {\\n            // 28 first epochs with 4.5% expansion\\n            _sendToBoardroom(bombSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n        } else {\\n            if (previousEpochBombPrice > bombPriceCeiling) {\\n                // Expansion ($BOMB Price > 1 $ETH): there is some seigniorage to be allocated\\n                uint256 bondSupply = IERC20(bbond).totalSupply();\\n                uint256 _percentage = previousEpochBombPrice.sub(bombPriceOne);\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(bombSupply).mul(1e13);\\n                if (_percentage > _mse) {\\n                    _percentage = _mse;\\n                }\\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = bombSupply.mul(_percentage).div(1e13);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = bombSupply.mul(_percentage).div(1e13);\\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IBasisAsset(bomb).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(bomb), \\\"bomb\\\");\\n        require(address(_token) != address(bbond), \\\"bond\\\");\\n        require(address(_token) != address(bshare), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    function boardroomSetOperator(address _operator) external onlyOperator {\\n        IBoardroom(boardroom).setOperator(_operator);\\n    }\\n\\n    function boardroomSetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        IBoardroom(boardroom).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n    }\\n\\n    function boardroomAllocateSeigniorage(uint256 amount) external onlyOperator {\\n        IBoardroom(boardroom).allocateSeigniorage(amount);\\n    }\\n\\n    function boardroomGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(boardroom).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xd9eff45c20daf77a561a3ef307888d0e016fba9c19bbd25be8fd593d1cfcc9ff\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0xd7a0645a5d2c8a0204f2c536388b034e9fa3b725283c36ebc38c0282627ae4ba\",\"license\":\"MIT\"},\"contracts/interfaces/IBoardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _member) external view returns (uint256);\\n\\n    function earned(address _member) external view returns (uint256);\\n\\n    function canWithdraw(address _member) external view returns (bool);\\n\\n    function canClaimReward(address _member) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getBombPrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb8fecebff3572e27cb1fa5e90398b4053c985fa9d1d52203bc5d37303f669852\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\n}\\n\",\"keccak256\":\"0xfe915dcf8502dacae92ed455f5e9e3c5cc159a7ad809f11b333de493c98828d3\",\"license\":\"MIT\"},\"contracts/lib/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0x3ee5b5170fa8ccf39d30a1980b470fb21b3a1cefe47921d98a1a5ebd85ff7d2f\",\"license\":\"MIT\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0x1ae1bc52c72e3ad2fc80f7863e454f2bff37b902fa1ad639859681369e9b82db\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x8e558ef5a039ce6ecd27eef794d31a136fd7b0e8c473bd86daa5baf7e8cf7a26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14412,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5962,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5965,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5967,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "startTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5970,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epoch",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5973,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epochSupplyContractionLeft",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5985,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "excludedFromTotalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5987,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bomb",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5989,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bbond",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5991,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bshare",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5993,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "boardroom",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5995,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bombOracle",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5997,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bombPriceOne",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5999,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bombPriceCeiling",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6001,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageSaved",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6004,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "supplyTiers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6007,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxExpansionTiers",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6009,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyExpansionPercent",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6011,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bondDepletionFloorPercent",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6013,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageExpansionFloorPercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6015,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyContractionPercent",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6017,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDebtRatioPercent",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 6019,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapEpochs",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6021,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapSupplyExpansionPercent",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 6023,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "previousEpochBombPrice",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 6025,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDiscountRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6027,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxPremiumRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 6029,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "discountPercent",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 6031,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumThreshold",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 6033,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumPercent",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 6035,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "mintingFactorForPayingDebt",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 6037,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFund",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 6039,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFundSharedPercent",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 6041,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFund",
        "offset": 0,
        "slot": "32",
        "type": "t_address"
      },
      {
        "astId": 6043,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundSharedPercent",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}